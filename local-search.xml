<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="/2023/02/25/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/02/25/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式是一种创建型设计模式，允许客户端创建一系列相关对象而无需指定其具体类。这种模式提供了一种封装一组具有共同主题的单独工厂而不指定其具体类的方法。</p><p>在 Swift 5 中，我们可以通过定义协议并用其实现类来实现抽象工厂模式。以下是一个基于抽象工厂模式的例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 定义抽象工厂协议</span><br><span class="hljs-keyword">protocol</span> <span class="hljs-title class_">AbstractFactory</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">createButton</span>() -&gt; <span class="hljs-type">Button</span><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">createTextField</span>() -&gt; <span class="hljs-type">TextField</span><br>&#125;<br><br><span class="hljs-comment">// 定义具体工厂类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory1</span>: <span class="hljs-title class_">AbstractFactory</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">createButton</span>() -&gt; <span class="hljs-type">Button</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">ConcreteButton1</span>()<br>    &#125;<br><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">createTextField</span>() -&gt; <span class="hljs-type">TextField</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">ConcreteTextField1</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义具体工厂类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory2</span>: <span class="hljs-title class_">AbstractFactory</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">createButton</span>() -&gt; <span class="hljs-type">Button</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">ConcreteButton2</span>()<br>    &#125;<br><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">createTextField</span>() -&gt; <span class="hljs-type">TextField</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">ConcreteTextField2</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义抽象产品协议</span><br><span class="hljs-keyword">protocol</span> <span class="hljs-title class_">Button</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">display</span>()<br>&#125;<br><br><span class="hljs-comment">// 定义具体产品类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteButton1</span>: <span class="hljs-title class_">Button</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">display</span>() &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is Button 1&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义具体产品类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteButton2</span>: <span class="hljs-title class_">Button</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">display</span>() &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is Button 2&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义抽象产品协议</span><br><span class="hljs-keyword">protocol</span> <span class="hljs-title class_">TextField</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">display</span>()<br>&#125;<br><br><span class="hljs-comment">// 定义具体产品类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteTextField1</span>: <span class="hljs-title class_">TextField</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">display</span>() &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is Text Field 1&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义具体产品类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteTextField2</span>: <span class="hljs-title class_">TextField</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">display</span>() &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is Text Field 2&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用抽象工厂模式创建对象</span><br><span class="hljs-keyword">let</span> factory1 <span class="hljs-operator">=</span> <span class="hljs-type">ConcreteFactory1</span>()<br><span class="hljs-keyword">let</span> factory2 <span class="hljs-operator">=</span> <span class="hljs-type">ConcreteFactory2</span>()<br><br><span class="hljs-keyword">let</span> button1 <span class="hljs-operator">=</span> factory1.createButton()<br><span class="hljs-keyword">let</span> textField1 <span class="hljs-operator">=</span> factory1.createTextField()<br><br><span class="hljs-keyword">let</span> button2 <span class="hljs-operator">=</span> factory2.createButton()<br><span class="hljs-keyword">let</span> textField2 <span class="hljs-operator">=</span> factory2.createTextField()<br><br>button1.display() <span class="hljs-comment">// Output: This is Button 1</span><br>textField1.display() <span class="hljs-comment">// Output: This is Text Field 1</span><br><br>button2.display() <span class="hljs-comment">// Output: This is Button 2</span><br>textField2.display() <span class="hljs-comment">// Output: This is Text Field 2</span><br><br></code></pre></td></tr></table></figure><p>在上述代码中，我们定义了一个抽象工厂协议 <code>AbstractFactory</code>，并用其实现类 <code>ConcreteFactory1</code> 和 <code>ConcreteFactory2</code> 来创建一系列相关对象。具体产品类 <code>ConcreteButton1</code>、<code>ConcreteButton2</code>、<code>ConcreteTextField1</code> 和 <code>ConcreteTextField2</code> 实现了抽象产品协议 <code>Button</code> 和 <code>TextField</code>，并在具体工厂类中被实例化。通过使用具体工厂类创建产品对象，我们可以无需指定其具体类，从而实现了抽象工厂模式的特性。</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/25/hello-world/"/>
    <url>/2023/02/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
